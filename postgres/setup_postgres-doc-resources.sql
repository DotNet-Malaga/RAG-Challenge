
-- modelos ai locales. revisar enlace: solo en regiones concretas y para servicios nuevos

-- https://learn.microsoft.com/en-us/azure/postgresql/flexible-server/azure-local-ai

/*

Australia East
East USA
France Central **
Japan East
UK South
West Europe
West USA

memory-optimized Azure VM SKUs with a minimum of 4 vCores. Today, if you are using a VM that does 
not meet the minimum requirements, the azure_local_ai extension will not appear in the list of 
available extensions in Server parameters

*/

-- modulo azure_ai (necesita endpoint de openai externo)
-- https://learn.microsoft.com/en-us/azure/postgresql/flexible-server/generative-ai-azure-overview

-- config de servidor, server parameters, azure.extensions, añadir: azure_ai, UUID-OSSP
-- shared_preload_libraries

-- SHOW azure.extensions para verificar si la extension está habilitada

-- habilitar: https://learn.microsoft.com/en-us/azure/postgresql/flexible-server/concepts-extensions


-- how to use extensions
-- https://learn.microsoft.com/en-us/azure/postgresql/flexible-server/concepts-extensions


-- ejecutar desde ps habilitar las extensiones azure_ai y vector
-- el portal de azure NO incluye vector, q es necesario para los embedings

/*
az login

-- comandos az cli para postgres: https://learn.microsoft.com/en-us/cli/azure/postgres/flexible-server?view=azure-cli-latest


az postgres flexible-server parameter set `
    --resource-group <rg>  `
    --server-name <server> `
    --subscription <subs_id> `
    --name azure.extensions `
    --value vector,azure_ai,azure_local_ai


az postgres flexible-server update `
--name <dbname> `
--resource-group <rgname> `
--admin-password <password> `


*/

-- azure_ai

SELECT * FROM pg_available_extensions where name like '%vector%' or  name like '%azure%';

SHOW azure.extensions;

CREATE EXTENSION azure_ai;
CREATE EXTENSION vector;

select azure_ai.set_setting('azure_openai.endpoint','https://<endpoint>.openai.azure.com'); 
select azure_ai.set_setting('azure_openai.subscription_key', 'key');

select azure_ai.get_setting('azure_openai.endpoint');
select azure_ai.get_setting('azure_openai.subscription_key');
select azure_ai.version();

ALTER EXTENSION azure_ai UPDATE;
ALTER EXTENSION vector UPDATE;

-- azure_local_ai

SELECT * FROM pg_available_extensions where name like '%vector%' or  name like '%azure%';

SHOW azure.extensions;

CREATE EXTENSION azure_local_ai;
CREATE EXTENSION vector;

SELECT azure_local_ai.get_setting('intra_op_parallelism');
SELECT azure_local_ai.get_setting('inter_op_parallelism');
SELECT azure_local_ai.get_setting('spin_control');

ALTER EXTENSION azure_local_ai UPDATE;
ALTER EXTENSION vector UPDATE;


-- MOCUP DE USO DE EMBEDDINGS
-- azure_ai.create_embeddings(model_uri text, input text, batch_size bigint DEFAULT 128, timeout_ms integer DEFAULT 3600000);

-- Create tables and populate data
DROP TABLE IF EXISTS conference_session_embeddings;
DROP TABLE IF EXISTS conference_sessions;

CREATE TABLE conference_sessions(
  session_id int PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  title text,
  session_abstract text,
  duration_minutes integer,
  publish_date timestamp
);

-- Create a table to store embeddings with a vector column.
CREATE TABLE conference_session_embeddings(
  session_id integer NOT NULL REFERENCES conference_sessions(session_id),
  session_embedding vector(1536)
);

-- Insert a row into the sessions table
INSERT INTO conference_sessions
    (title,session_abstract,duration_minutes,publish_date) 
VALUES
    ('Gen AI with Azure Database for PostgreSQL flexible server'
    ,'Learn about building intelligent applications with azure_ai extension and pg_vector' 
    , 60, current_timestamp)
    ,('Deep Dive: PostgreSQL database storage engine internals'
    ,' We will dig deep into storage internals'
    , 30, current_timestamp)
    ;

-- Get an embedding for the Session Abstract
SELECT
     pg_typeof(azure_openai.create_embeddings('text-embedding-ada-002', c.session_abstract)) as embedding_data_type
    ,azure_openai.create_embeddings('text-embedding-ada-002', c.session_abstract)
  FROM
    conference_sessions c LIMIT 10;

-- Insert embeddings 
INSERT INTO conference_session_embeddings
    (session_id, session_embedding)
SELECT
    c.session_id, (azure_openai.create_embeddings('text-embedding-ada-002', c.session_abstract))
FROM
    conference_sessions as c  
LEFT OUTER JOIN
    conference_session_embeddings e ON e.session_id = c.session_id
WHERE
    e.session_id IS NULL;

-- Create a HNSW index
CREATE INDEX ON conference_session_embeddings USING hnsw (session_embedding vector_ip_ops);


-- Retrieve top similarity match
SELECT
    c.*
FROM
    conference_session_embeddings e
INNER JOIN
    conference_sessions c ON c.session_id = e.session_id
ORDER BY
    e.session_embedding <#> azure_openai.create_embeddings('text-embedding-ada-002', 'Session to learn about building chatbots')::vector
LIMIT 1;


-- cleanup

DROP TABLE IF EXISTS conference_session_embeddings;
DROP TABLE IF EXISTS conference_sessions;



-- modelo azure_local_ai: https://huggingface.co/intfloat/multilingual-e5-small

-- azure_local_ai.create_embeddings(model_uri text, input text, batch_size bigint DEFAULT 128, timeout_ms integer DEFAULT 3600000);
-- azure_local_ai.create_embeddings(model_uri text, array[inputs [text]], batch_size bigint DEFAULT 128, timeout_ms integer DEFAULT 3600000);


-- Create tables and populate data
DROP TABLE IF EXISTS conference_session_embeddings;
DROP TABLE IF EXISTS conference_sessions;

CREATE TABLE conference_sessions(
  session_id int PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  title text,
  session_abstract text,
  duration_minutes integer,
  publish_date timestamp
);

-- Create a table to store embeddings with a vector column.
CREATE TABLE conference_session_embeddings(
  session_id integer NOT NULL REFERENCES conference_sessions(session_id),
  session_embedding vector(384)
);

-- Insert a row into the sessions table
INSERT INTO conference_sessions
    (title,session_abstract,duration_minutes,publish_date) 
VALUES
    ('Gen AI with Azure Database for PostgreSQL flexible server'
    ,'Learn about building intelligent applications with azure_ai extension and pg_vector' 
    , 60, current_timestamp)
    ,('Deep Dive: PostgreSQL database storage engine internals'
    ,' We will dig deep into storage internals'
    , 30, current_timestamp)
    ;

-- Get an embedding for the Session Abstract
SELECT
     pg_typeof(azure_local_ai.create_embeddings('multilingual-e5-small:v1', c.session_abstract)) as embedding_data_type
    ,azure_local_ai.create_embeddings('multilingual-e5-small:v1', c.session_abstract)
  FROM
    conference_sessions c LIMIT 10;

-- Insert embeddings 
INSERT INTO conference_session_embeddings
    (session_id, session_embedding)
SELECT
    c.session_id, (azure_local_ai.create_embeddings('multilingual-e5-small:v1', c.session_abstract))
FROM
    conference_sessions as c  
LEFT OUTER JOIN
    conference_session_embeddings e ON e.session_id = c.session_id
WHERE
    e.session_id IS NULL;

-- Create a HNSW index
CREATE INDEX ON conference_session_embeddings USING hnsw (session_embedding vector_ip_ops);


-- Retrieve top similarity match
SELECT
    c.*
FROM
    conference_session_embeddings e
INNER JOIN
    conference_sessions c ON c.session_id = e.session_id
ORDER BY
    e.session_embedding <#> azure_local_ai.create_embeddings('multilingual-e5-small:v1', 'Session to learn about building chatbots')::vector
LIMIT 1;


-- cleanup

DROP TABLE IF EXISTS conference_session_embeddings;
DROP TABLE IF EXISTS conference_sessions;







WITH v AS (
  SELECT 
    azure_local_ai.create_embeddings('multilingual-e5-small:v1', 'Oyarzabal scores Goal at 75. Marquez scores Goal al 94')::vector vm,
    azure_local_ai.create_embeddings('multilingual-e5-small:v1', 'goalkeaper')::vector v1,
    azure_local_ai.create_embeddings('multilingual-e5-small:v1', 'goal')::vector v2,
    azure_local_ai.create_embeddings('multilingual-e5-small:v1', 'Goal')::vector v3
)
SELECT 
1 -(v.vm <=> v.v1) cv1, 1-(v.vm <=> v.v2) cv2, 1-(v.vm <=> v.v3) cv3, 
v.vm <#> v.v1 iv1, v.vm <#> v.v2 iv2, v.vm <#> v.v3 iv3
FROM v;


WITH v AS (
  SELECT 
    azure_openai.create_embeddings('text-embedding-ada-002', 'Oyarzabal scores Goal at 75. Marquez scores Goal al 94')::vector vm,
    azure_openai.create_embeddings('text-embedding-ada-002', 'goalkeaper')::vector v1,
    azure_openai.create_embeddings('text-embedding-ada-002', 'goal')::vector v2,
    azure_openai.create_embeddings('text-embedding-ada-002', 'Goal')::vector v3
)
SELECT 
1 -(v.vm <=> v.v1) cv1, 1-(v.vm <=> v.v2) cv2, 1-(v.vm <=> v.v3) cv3, 
v.vm <#> v.v1 iv1, v.vm <#> v.v2 iv2, v.vm <#> v.v3 iv3
FROM v;




-- <-> - L2 distance                -- vector_l2_ops
-- <#> - (negative) inner product   -- vector_ip_ops
-- <=> - cosine distance            -- vector_cosine_ops
-- <+> - L1 distance                -- vector_l1_ops

/*
Supported types are:
    vector      - up to 2,000 dimensions
    halfvec     - up to 4,000 dimensions (added in 0.7.0)
    bit         - up to 64,000 dimensions (added in 0.7.0)
    sparsevec   - up to 1,000 non-zero elements (added in 0.7.0)

*/



